# https://docs.swagger.io/spec.html#511-object-example
# https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#document-structure
openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is application for a library. When, user take the one book or more\ 
    books, to application can indicating  which the book and how many books \
    was user took.
    This app can save data, so what the book, author who is, when was \
    the birthday of author, and who take the book.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  version: "1.0"
servers:
    - url: http://127.0.0.1:5000/api/v1
paths:
  /borrow/{index}:
    get:
        tags:
            - borrow
        summary: This is data from the middle table.
        description:
            Here,  we simple get the one position from the Borrow's table of db.
            It is table between the Book and Client of tables.
        operationId: borrow_get
        parameters:
            -   name: index
                in: path
                required: true
                description: |-
                    Index of single position from  Client's table of db. Example is how '/clients/1'.
                allowEmptyValue: false
                schema:
                    type: integer
                example: 1
        responses:
            200:
                description: |-
                    Here,  we simple receive position from the Borrow's table of db.
                content:
                  application/json:
                    schema:
                        properties:
                          message:
                            $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                          result:
                            $ref: '#/components/schemas/Book_response/properties/result/oneOf/1'
                    example:
                          message:
                            $ref: '#/components/schemas/Book_response/properties/message/oneOf/0/example'
                          result:
                            $ref: '#/components/schemas/Book_response/properties/result/oneOf/1/example'
            400:
                description: |-
                    This is not successful operation.
                content:
                    application/json:
                        schema:
                            properties:
                                message:
                                    type: string
                                    example: Not Ok
                                result:
                                    $ref: '#/components/schemas/Book_response/properties/result/oneOf/2'
                        example:
                            message: Not OK
                            status: false

  /borrows/{index}/return:
    patch:
        tags:
            - borrow
        summary: This is data from the middle table.
        description:
            Here,  we simple update the one position in the Borrow's table of db.
            It is table between the Book and Client of tables.
        operationId: borrow_one_change
        parameters:
            -   name: index
                in: path
                required: true
                description: |-
                    Index of single position from  Client's table of db. 
                    Example is how '/borrows/1/return'.
                allowEmptyValue: false
                schema:
                    type: integer
                example: 1
        requestBody:
            description: |-
                Add one position in Author's table of db. You can sending.

                Model 1:
                    - book_id: 1
                    - client_id: 1
                    - date_borrow: "2024-06-10"
                    - date_return: "2024-06-10"


                Model 2:
                    - book_id: null
                    - client_id: 12
                    - date_borrow: null
                    - date_return: null
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Borrow_request_put'
                    example:
                        book_id:
                            $ref: '#/components/schemas/Borrow_request_put/properties/book_id/example'
                        client_id:
                            $ref: '#/components/schemas/Borrow_request_put/properties/client_id/example'
                        date_borrow:
                            $ref: '#/components/schemas/Borrow_request_put/properties/date_borrow/example'
                        date_return:
                            $ref: '#/components/schemas/Borrow_request_put/properties/date_return/example'
        responses:
            200:
                description: Successful operation
                content:
                    application/json:
                        schema:
                            properties:
                                message:
                                    $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                                result:
                                    $ref: '#/components/schemas/Book_response/properties/result/oneOf/1'
                        example:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/0/example'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/1/example'
            400:
                description: Not successful operation.
                content:
                  application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/1'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/2'
                    example:
                        message:
                            $ref: '#/components/schemas/Book_response/properties/message/oneOf/1/example'
                        result:
                            $ref: '#/components/schemas/Book_response/properties/result/oneOf/2/example'
                            # Book_response

  /borrow:
    get:
        tags:
            - borrow
        summary: This is data from the middle table.
        description:
            Here,  we simple get the one position from the Borrow's table of db.
            It is table between the Book and Client of tables.
        operationId: borrow_get
        responses:
            200:
                description: |-
                    Here,  we simple receive position from the Borrow's table of db.
                content:
                  application/json:
                    schema:
                        properties:
                          message:
                            $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                          result:
                            $ref: '#/components/schemas/Book_response/properties/result/oneOf/1'
                    example:
                          message:
                            $ref: '#/components/schemas/Book_response/properties/message/oneOf/0/example'
                          result:
                            $ref: '#/components/schemas/Book_response/properties/result/oneOf/1/example'
            400:
                description: |-
                    This is not successful operation.
                content:
                    application/json:
                        schema:
                            properties:
                                message:
                                    type: string
                                    example: Not Ok
                                result:
                                    $ref: '#/components/schemas/Book_response/properties/result/oneOf/2'
                        example:
                            message: Not OK
                            status: false
    post:
        tags:
            - borrow
        summary: This is data from the middle table.
        description:
            Here,  we simple add the one position in the Borrow's table of db.
            It is table between the Book and Client of tables.

            When is user takes the book, runs check the book's quantity. If number of the quantity book
            not more than zero, we get the parameter 'result' has value the false
            

            If number of the quantity book is more 0, script make the total books number less from 
            the Book's table. Logic is the old quantity of all book minus the number of book which client took.
            There we get the parameter 'result' has value the true
        operationId: borrow_add
        requestBody:
            description: |-
                Add one position in Author's table of db. You can sending
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Borrow_request'
                    example:
                        book_id:
                            $ref: '#/components/schemas/Borrow_request/properties/book_id/example'
                        client_id:
                            $ref: '#/components/schemas/Borrow_request/properties/client_id/example'
                        date_borrow:
                            $ref: '#/components/schemas/Borrow_request/properties/date_borrow/example'
                        date_return:
                            $ref: '#/components/schemas/Borrow_request/properties/date_return/example'
        responses:
            200:
                description: Successful operation
                content:
                    application/json:
                        schema:
                            properties:
                                message:
                                    $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                                result:
                                    $ref: '#/components/schemas/Book_response/properties/result/oneOf/1'
                        example:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/0/example'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/1/example'
            400:
                description: Not successful operation.
                content:
                  application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/1'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/2'
                    example:
                        message:
                            $ref: '#/components/schemas/Book_response/properties/message/oneOf/1/example'
                        result:
                            $ref: '#/components/schemas/Book_response/properties/result/oneOf/2/example'
                            # Book_response
  /books:
    get:
      tags:
        - book
      summary: Get the all positions from Book's table of db.
      description: |-
        Here,  we simple receive position from the Book's table of db.
      operationId: book_get
      responses:
        '200':
          description: There is successful operation
          content:
            application/json:
                schema:
                    properties:
                        message:
                            $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                        result:
                            $ref: '#/components/schemas/Book_response/properties/result/oneOf/0'
                example:
                    message: "Ok"
                    result:
                        -   author_id: 1
                            descriptions: descriptions descriptions
                            index: 1
                            quantity: 1
                            register_number: 35c83f21-a920-49e6-a414-e0af1ee4e281
                            title: title of book
                        -   author_id: 1
                            descriptions: descriptions descriptions 2
                            index: 3
                            quantity: 0
                            register_number: 1ca4d03e-b868-483f-9a3b-d3d7f5d07b3b,
                            title: NEW title of book 2
        400:
            description: |-
                This is not successful operation.
                attribute the 'message' can cantain message:
                    - 'Not Ok'
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                type: string
                                example: Not Ok
                            result:
                                $ref: '#/components/schemas/Client_response/properties/result/oneOf/2'
                    example:
                        message: Not OK
                        status: false
    post:
        tags:
            - book
        summary: Create the one positions in Book's table of db.
        description: Add a new peposition
        operationId: book_add
        requestBody:
            description: |-
                Add one position in Author's table of db. You can sending
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_request'
                    example:
                        properties:
                            title:
                                $ref: '#/components/schemas/Book_request/properties/title/example'
                            descriptions:
                                $ref: '#/components/schemas/Book_request/properties/descriptions/example'
                            author_id:
                                $ref: '#/components/schemas/Book_request/properties/author_id/example'
                            quantity:
                                $ref: '#/components/schemas/Book_request/properties/quantity/example'
        responses:
            200:
                description: Successful operation
                content:
                    application/json:
                        schema:
                            properties:
                                message:
                                    $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                                result:
                                    $ref: '#/components/schemas/Book_response/properties/result/oneOf/1'
                        example:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/0/example'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/1/example'
            400:
                description: Not successful operation.
                content:
                  application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/1'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/2'
                    example:
                        message:
                            $ref: '#/components/schemas/Book_response/properties/message/oneOf/1/example'
                        result:
                            $ref: '#/components/schemas/Book_response/properties/result/oneOf/2/example'
                            # Book_response

  /books/{index}:
    delete:
      tags:
        - book
      summary: You can not remove the book's position everytime.
      description: |-
        You can not remove the book's position everytime when you want. If the ID of your position is included to the table 
        of Borrow of db, first, you must remove this ID from db of borrow. 
        
        If you try to remove the your position before checkibg the db of Borrow, you will get the 404 error.
      operationId: book_one_remove
      parameters:
        - name: index
          in: path
          required: true
          description: This is ID (index single position) from db.
          allowEmptyValue: false
          schema:
            type: integer
          example: 1
      responses:
        200:
            description: |-
                This is successful operation.
                attribute the 'message' can cantain message:
                - 'Ok'
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/1'
                    example:
                        message: OK
                        status: true
        400:
            description: |-
                This is not successful operation.
                attribute the 'message' can cantain message:
                - 'Not Ok'
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/1'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/2'
                    example:
                        message: Not OK
                        status: false

    get:
      tags:
        - book
      summary: Get one positions from Book's table of db.
      description: |-
        Here, we simple receive the one position from the Book's table of db.
      operationId: book_get
      parameters:
        - name: index
          in: path
          required: true
          description: This is ID (index single position) from db.
          allowEmptyValue: false
          schema:
            type: integer
          example: 1
      responses:
        '200':
            description: There is successful operation
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/1'
                    example:
                        message: "Ok"
                        result:
                            -   author_id: 1
                                descriptions: descriptions descriptions
                                index: 1
                                quantity: 1
                                register_number: 35c83f21-a920-49e6-a414-e0af1ee4e281
                                title: title of book
                            -   author_id: 1
                                descriptions: descriptions descriptions 2
                                index: 3
                                quantity: 0
                                register_number: 1ca4d03e-b868-483f-9a3b-d3d7f5d07b3b,
                                title: NEW title of book 2
        400:
            description: |-
                This is not successful operation.
                attribute the 'message' can cantain message:
                - 'Not Ok'
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/1'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/2'
                    example:
                        message: Not OK
                        status: false
    put:
        tags:
            - book
        summary: Get single position for update one or more data.
        description: |-
            Here, you can change the one or all data from Book's's table of db.\
            You can will change the all properties, this is:
            - 'author_id';
            - 'descriptions';
            - 'index';
            - 'quantity';
            - 'title';
            - 'register_number' or only one from everything properties/attributes.
            
            Model1:
                - 'author_id' is integer;
                - 'descriptions' is string;
                - 'index' is integer;
                - 'quantity' is integer;
                - 'title'is string;
                - 'register_number' is stringis string.
            \
            Model2:
                - 'author_id' is integer;
                - 'descriptions' null;
                - 'index' null;
                - 'quantity' null;
                - 'title'is null;
                - 'register_number' null. Or how do you want.

        operationId: book_one_change
        parameters:
            -   name: index
                in: path
                required: true
                description: This is ID (index single position) from db.
                allowEmptyValue: false
                schema:
                    type: integer
                example: 1
        requestBody:
            required: true
            description: |-
                Add one position in Author's table of db. You can sending
            content:
                application/json:
                    schema:
                        properties:

                            title:
                                $ref: "#/components/schemas/Book_request_put/properties/title"
                            #     type: string
                            #     example: "Update title of book 4"
                            descriptions:
                                $ref: "#/components/schemas/Book_request_put/properties/descriptions"
                            #     type: string
                            #     example: null
                            author_id:
                                $ref: "#/components/schemas/Book_request_put/properties/author_id"
                            #     type: integer
                            #     example: null
                            quantity:
                                $ref: "#/components/schemas/Book_request_put/properties/quantity"
                            #     type: integer
                            #     example: null
                    example:
                        properties:
                            title: "Update title of book 4"
                            descriptions: null
                            author_id: null
                            quantity: null
        responses:
            '200':
                description: There is successful operation
                content:
                    application/json:
                        schema:
                            properties:
                                message:
                                    $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                                result:
                                    $ref: '#/components/schemas/Book_response/properties/result/oneOf/1'
                        example:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/0/example'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/1/example'

            400:
                description: |-
                    This is not successful operation.
                    attribute the 'message' can cantain message:
                    - 'Not Ok'
                content:
                    application/json:
                        schema:
                            properties:
                                message:
                                    $ref: '#/components/schemas/Book_response/properties/message/oneOf/1'
                                result:
                                    $ref: '#/components/schemas/Book_response/properties/result/oneOf/2'
                        example:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/1/example'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/2/example'
  /authors:
    get:
      tags:
        - author
      summary: Get the all positions from Author's table of db.
      description: |-
        Here,  we simple receive positions from the Author's table of db.
      operationId: author_get
      responses:
        '200':
          description: There is successful operation
          content:
            application/json:
              schema:
                properties:
                    message:
                        $ref: '#/components/schemas/Client_response/properties/message'
                    result:
                        $ref: '#/components/schemas/Client_response/properties/result/oneOf/1'
                    secondname:
                        type: string
                        nullable: true
                        example: "Romanov"
              example:
                massage: "Ok"
                result:
                  - birthday: "1980-06-25T00:00:00"
                    firstname: "Igor"
                    index: 1
                    secondname: "igorev"
                  - birthday: "1980-06-25T00:00:00"
                    firstname: "Roma"
                    index: 2
                    secondname: "Romanov"

        '400':
            description: |- 
                There is not successful operation.
                Th 'massage' can has:
                - "Not Ok";
                - "[сlient_one_get]: Mistake => AsyncEngine expected, ..:
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Client_response/properties/message'
                            result:
                                $ref: '#/components/schemas/Client_response/properties/result/oneOf/2'
                    example:
                        massage: "Not OK"
                        result: false
    post:
      tags:
        - author
      summary: Create/add one position in the Author table of db
      description: Add a new peposition
      operationId: author_add
      requestBody:
        description: |-
          Add one position in Author's table of db. You can sending:
            \
          Model1: 
          - "firstname" is string;
          - 'secondname' is string; 
          - 'birthday' is string.
          
          Model2:
          - "firstname" is string;
          - 'secondname' is string;
          - 'birthday' is null.
          \
          Example for "birthday' is '2024-06-10' or '2024.06.10' or null.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author_request'
      responses:
        '200':
          description: |-
            This is succesful operation.
          content:
            application/json:
              schema:
                properties:
                  message:
                    $ref: '#/components/schemas/Client_response/properties/message'
                  result:
                    $ref: '#/components/schemas/Client_response/properties/result/oneOf/0'
              example:
                message: "User was updated"
                status: true
        '400':
            description: |-
                This is not successful operation.
                attribute the 'message' can cantain message:
                    - "[сlient_add]:  END  Does not have a 'firstname'"
                    - or 'Not Ok'
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Client_response'
                    example:
                        message: "[сlient_add]:  END  Does not have a 'firstname'"
                        status: false
  /authors/{index}:
    get:
      tags:
        - author
      summary: Get single position for only reading.
      description: |-
        Here, can receive the single position from Author's table db.\
        You can only read the data. this is 'firstname', 'secondname' and \
        'birthday'.
      operationId: author_one_get
      parameters:
        - name: index
          in: path
          required: true
          description: This is ID (index single position) from db.
          allowEmptyValue: false
          schema:
            type: integer
          example: 2
      responses:
        '200':
            description: There is successful operation
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: "#/components/schemas/Client_response/properties/message"
                            result:
                                $ref: "#/components/schemas/Client_response/properties/result/oneOf/1"
                    example:
                        massage: "Ok"
                        result:
                            -   birthday: "1980-06-25T00:00:00"
                                firstname: "Igor"
                                index: 1
                                secondname: "Igorex"

        '400':
            description: |-
                There is not successful operation.\
                THe 'massage' can has "Not Ok" or\
                "[сlient_one_get]: Mistake => AsyncEngine expected, ..:
            content:
                application/json:

                    schema:
                        properties:
                            message:
                                type: string
                                example: "Not Ok"
                            result:
                                $ref: "#/components/schemas/Client_response/properties/result/oneOf/2"
                    example:
                        massage: "Not Ok"
                        result: false
    put:
      tags:
        - author
      summary: Get single position for update one or more data
      description: |-
        Here, can change the one or all data from Author's table of db.\
        You can will change the all properties, this is:
          - 'firstname', 
          - 'secondname' 
          - 'birthday' or only one from everything properties/attributes.

      operationId: author_one_change
      parameters:
        - name: index
          in: path
          required: true
          description: "This is ID (index single position) from db."
          allowEmptyValue: false
          schema:
            type: integer
          example: 2
      requestBody:
        required: true
        description: |-
          Update an existent position in the library
            Add one position in Authors's table of db. You can sending "firstname",
            "secondname" and 'birthday' or one only "firstname" propetry. 

            Model1: 
            - "firstname" is string; 
            - 'birthday' is string;
            - 'secondname' is string.
            \
            Model2:
            - "firstname" is string;
            - 'birthday' is null.
            - 'secondname' is null.
            \
            Example a format for "birthday' is:
                - '2024-06-10'
                - '2024.06.10'
                - null.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author_request'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    $ref: '#/components/schemas/Client_response/properties/message'
                  result:
                    $ref: '#/components/schemas/Client_response/properties/result/oneOf/0'
              example:
                message: "User was updated"
                status: true
        '400':
          description:  Something what wrong. Maybe Invalid 'index' supplied.
          content:
            application/json:
              schema:
                properties:
                    message:
                      type: string
                      example: "Not Ok"
                    result:
                      $ref: '#/components/schemas/Client_response/properties/result/oneOf/0'
              example:
                message: "[сlient_add]:  END  Does not have a 'firstname'"
                status: false
    delete:
      tags:
        - author
      summary: You can not remove the author's position everytime.
      description: |-
        You can not remove the author's position everytime when you want. If the ID of your position is included to the table 
        of Book of db, first, you must remove this ID from db of Book. 
        
        If you try to remove the your position before checkibg the db of Book, you will get the 404 error.
      operationId: author_one_remove
      parameters:
        - name: index
          in: path
          required: true
          description: This is ID (index single position) from db.
          allowEmptyValue: false
          schema:
            type: integer
          example: 1
      responses:
        200:
            description: |-
                This is successful operation.
                attribute the 'message' can cantain message:
                - 'Ok'
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/1'
                    example:
                        message: OK
                        status: true
        400:
            description: |-
                This is not successful operation.
                attribute the 'message' can cantain message:
                - 'Not Ok'
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/1'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/2'
                    example:
                        message: Not OK
                        status: false

  /clients:
    get:
      tags:
        - client
      summary: Get the all positions from Client's table of db.
      description: |-
        Here,  we simple receive one position from the Clint's table of db.
        Entrypoint mast receive index. By index will look up the position and return.
      operationId: сlient_get
      responses:
        '200':
          description: There is successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    $ref: '#/components/schemas/Client_response/properties/message'
                  result:
                    $ref: '#/components/schemas/Client_response/properties/result/oneOf/1'
              example:
                massage: "Ok"
                result:
                  - birthday: "1980-06-25T00:00:00"
                    firstname: "Igor"
                    index: 1
                  - birthday: "1980-06-25T00:00:00"
                    firstname: "Roma"
                    index: 2
        '400':
          description: |- 
            There is not successful operation.
            Th 'massage' can has:
              - "Not Ok";
              - "[сlient_one_get]: Mistake => AsyncEngine expected, ..:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_response'
              example:
                massage: "Not OK"
                result: false
    post:
      tags:
        - client
      summary: Add one position in Client's table of db.
      operationId: client_add
      requestBody:
        description: |-
          Add one position in Client's table of db. You can sending "firstname"\
          and 'birthday' or only "firstname". 

          Model1: 
           - "firstname" is string; 
           - 'birthday' is string.
           
          Model2:
           - "firstname" is string;
           - 'birthday' is null.
          
          Example for "birthday' is:
              - '2024-06-10'
              - '2024.06.10'
              - null.
        content:
          application/json:
            schema:
              properties:
                firstname:
                  $ref: '#/components/schemas/Client_request/properties/firstname'
                birthday:
                  $ref: "#/components/schemas/Client_request/properties/birthday"
            example:
              firstname: Igor
              birthday: null

      responses:
        '200':
          description: |-
            This is succesful operation.
          content:
            application/json:
              schema:
                properties:
                  message:
                    $ref: '#/components/schemas/Client_response/properties/message'
                  result:
                    $ref: '#/components/schemas/Client_response/properties/result/oneOf/0'
              example:
                message: "User was added"
                status: true
        '400':
          description: This is not successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_response'
              example:
                message: "[сlient_add]:  END  Does not have a 'firstname'"
                status: false
  /clients/{index}:
    get:
      tags:
        - client
      summary:  Get the single position by index from Client's table of db.
      description: |-
        Here,  we simple removing one position from the Clint's table of db.
        Entrypoint mast receive index. By index will look up the position and delete.
      operationId: сlient_one_get
      parameters:
        - name: index
          in: path
          required: true
          description: |-
            Index of single position from  Client's table of db. Example is how '/clients/1'.
          allowEmptyValue: false
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: There is successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_response'
              example:
                massage: "Ok"
                result:
                  - birthday: "1980-06-25T00:00:00"
                    firstname: "Igor"
                    index: 1
        '400':
          description: |- 
            There is not successful operation.\
            THe 'massage' can has "Not Ok" or\
            "[сlient_one_get]: Mistake => AsyncEngine expected, ..:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_response'
              example:
                message: "Not Ok"
                result: false
    put:
      tags:
        - client
      summary: Update an existing of client
      description: |-
        Here, you can change the one or everything Client's attributes.
        It is the 'firstname' and 'birthday'. Or the single 
        attribute the 'firstname' or 'birthday'. 
        
        Model1:
            - 'firstname': 'Sasha' 
            - 'birthday': '2024-10-12'
        
        Model2:
            - 'firstname': 'Sasha' 
            - 'birthday': null
        
        Model3:
            - 'firstname': null
            - 'birthday': '2024-10-12'

      operationId: book_one_change
      parameters:
        - name: index
          in: path
          required: true
          description: Index of single position from  Client's table of db. Example is how '/clients/1'.
          allowEmptyValue: false
          schema:
            type: integer
          example: 1
      requestBody:
        description: |-
            Update an existent position in the library
            Add one position in Client's table of db. You can sending "firstname"\
            and 'birthday' or only "firstname". 

            Model1: 
            - "firstname" is string; 
            - 'birthday' is string.
            
            Model2:
            - "firstname" is string;
            - 'birthday' is null.
            
            Example for "birthday' is:
                - '2024-06-10'
                - '2024.06.10'
                - null.
        content:
          application/json:
            schema:
              properties:
                firstname:
                  $ref: '#/components/schemas/Client_request/properties/firstname'
                birthday:
                  $ref: "#/components/schemas/Client_request/properties/birthday"
            example:
              firstname: Igor
              birthday: null
        required: true
      responses:
        '200':
          description: |-
            This is succesful operation.
          content:
            application/json:
              schema:
                properties:
                  message:
                    $ref: '#/components/schemas/Client_response/properties/message'
                  result:
                    $ref: '#/components/schemas/Client_response/properties/result/oneOf/0'
              example:
                message: "User was updated"
                status: true
        '400':
          description: This is not successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client_response'
              example:
                message: "[сlient_add]:  END  Does not have a 'firstname'"
                status: false

    delete:
      tags:
        - author
      summary: You can not remove the client's position everytime.
      description: |-
        You can not remove the client's position everytime when you want. If the ID of your position is included to the table 
        of Borrow of db, first, you must remove this ID from db of Borrow. 
        
        If you try to remove the your position before checkibg the db of Book, you will get the 404 error.
      operationId: сlient_one_remove
      parameters:
        - name: index
          in: path
          required: true
          description: This is ID (index single position) from db.
          allowEmptyValue: false
          schema:
            type: integer
          example: 1
      responses:
        200:
            description: |-
                This is successful operation.
                attribute the 'message' can cantain message:
                - 'Ok'
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/0'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/1'
                    example:
                        message: OK
                        status: true
        400:
            description: |-
                This is not successful operation.
                attribute the 'message' can cantain message:
                - 'Not Ok'
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                $ref: '#/components/schemas/Book_response/properties/message/oneOf/1'
                            result:
                                $ref: '#/components/schemas/Book_response/properties/result/oneOf/2'
                    example:
                        message: Not OK
                        status: false

components:
  schemas:
    Borrow_request_put:
        type: object
        properties:
            book_id:
                type: integer
                example: 1
                description: This is index (ID) the one book from Book's table.
                nullable: true
            client_id:
                type: string
                example: descriptions descriptions 3
                description: Here is not a long description for the book
                nullable: true
            date_borrow:
                type: string
                example: "2024-06-10"
                format: date-time
                description: |-
                    This is date when the client take the book. 
                    Example: 
                    - '2024-06-10';
                    - '2024.06.10';
                    - null.
                nullable: true
            date_return:
                type: string
                example: "2024-06-10"
                format: date-time
                description: |-
                    This is date when the client take the book. 
                    Example: 
                    - '2024-06-10';
                    - '2024.06.10';
                    - null.
                nullable: true
    Borrow_request:
        type: object
        properties:
            book_id:
                type: integer
                example: 1
                description: This is index (ID) the one book from Book's table.
            client_id:
                type: integer
                example: 1
                description: This is index (ID) the one book from Client's table.
            date_borrow:
                type: string
                example: "2024-06-10"
                format: date-time
                description: |-
                    This is date when the client take the book. 
                    Example: 
                    - '2024-06-10';
                    - '2024.06.10';
                    - null.
            date_return:
                type: string
                nullable: true
                example: "2024-06-10"
                format: date-time
                description: |-
                    This is date when the client returns the book. 
                    Example: 
                    - '2024-06-10';
                    - '2024.06.10';
                    - null. 

    Book_request:
        type: object
        properties:
            title:
                type: string
                example: title of book 3
                description: This is a title of book
            descriptions:
                type: string
                example: descriptions descriptions 3
                description: Here is not a long description for the book
            author_id:
                type: integer
                example: 2
                description: |-
                    This is a index/ID from the Author's table of db. 
                    It is who is author of a book.
            quantity:
                type: integer
                example: 24
                description: This is a total quantity for the book.
    Book_request_put:
        type: object
        properties:
            title:
                type: string
                nullable: true
                example: title of book 3
                description: This is a title of book
            descriptions:
                type: string
                nullable: true
                example: descriptions descriptions 3
                description: Here is not a long description for the book
            author_id:
                type: integer
                nullable: true
                example: 2
                description: |-
                    This is a index/ID from the Author's table of db. 
                    It is who is author of a book.
            quantity:
                type: integer
                nullable: true
                example: 24
                description: This is a total quantity for the book.
    Author_request:
      type: object
      properties:
        firstname:
          type: string
          nullable: true
          example: Igor
          description: |-
            Is it a value: Igor. But, you need
            to look into the this parameters. One parameter (this is 'firstname' or
            'birthday') from everything must contain. For a 'firstname' data this is
            a string type. Example: 'Igor'. If, there we have value null, 
            it means what parameter 'birthday' must contain the type string, 
            but not null
        birthday:
          type: string
          nullable: true
          description: |-
            Is it a value date. But, you need to look into the this parameters.
            For a 'birthday' data this is a string type.
            Example: 
              - '2024-06-10';
              - '2024.06.10';
              - null. it means what parameter 'firstname' must contain 
            the type string, but not null.
          example: "2024-06-10"
          format: date-time
        secondname:
          type: string
          nullable: true
          description: |-
            You can indicate string type or null. Example thi is 'Igorev' \
            or null
          example: "Igorev"
    Client_request:
      type: object
      properties:
        firstname:
          type: string
          example: Igor
          description: |-
            'firstname' must containe data of type string.
            You can't indicate the null into parameter the firstname' for request body.
        birthday:
          type: string
          nullable: true
          description: |-
            For 'birthday', you can indicating data how type string or how null.
          example: "20sadasd24-06-10"
          format: date-time
    Client_response:
      type: object
      properties:
        message:
          type: string
          example: 'Ok'
        result:
          oneOf:
            - type: boolean
              nullable: true
              example: true
            - type: object
              example:
                - birthday: "1980-06-25T00:00:00"
                  firstname: "Igor"
                  index: 1
            - type: boolean
              nullable: true
              example: false
    Book_response:
        type: object
        properties:
            message:
                oneOf:
                    -   type: string
                        example: "OK"
                    -   type: string
                        example: "Not Ok"
            result:
                oneOf:
                    -   type: array
                        items:
                            type: object
                            properties:
                                author_id:
                                    type: integer
                                    example: 1
                                descriptions:
                                    type: string
                                    example: descriptions descriptions
                                index:
                                    type: integer
                                    example: 1
                                quantity:
                                    type: integer
                                    example: 24
                                    description: This is a total quantity for the book.
                                title:
                                    type: string
                                    example: title of book
                                register_number:
                                    type: string
                                    description: |-
                                        This table (Author) has the property 'quantity'
                                        Example we have a quantity equals 24.
                                        'register_number' this is property from ubstract 
                                        the table from this db.
                                        Every one book from the total quantity must have the
                                        index, for self
                            example:
                                author_id: 1
                                descriptions: "descriptions descriptions "
                                index: 1
                                quantity: 1
                                register_number: 35c83f21-a920-49e6-a414-e0af1ee4e281
                                title: title of book
                    -   type: boolean
                        example: true
                    -   type: boolean
                        example: false
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/oauth/authorize
          scopes:
            write:pets: "Modify pets in your account"
            read:pets: "Read your pets"
